<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dommel</name>
    </assembly>
    <members>
        <member name="T:Dommel.DommelMapper">
            <summary>
            Simple CRUD operations for Dapper.
            </summary>
        </member>
        <member name="M:Dommel.DommelMapper.Any``1(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Determines whether there's any entity of type <typeparamref name="TEntity"/> in the database.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns><c>true</c> if there's at least one entity in the database; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.AnyAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Determines whether there's any entity of type <typeparamref name="TEntity"/> in the database.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns><c>true</c> if there's at least one entity in the database; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Any``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Determines whether there's any entity of type <typeparamref name="TEntity"/> matching the specified predicate in the database.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns><c>true</c> if there's at least one entity in the database that matches the specified predicate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.AnyAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Determines whether there's any entity of type <typeparamref name="TEntity"/> matching the specified predicate in the database.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns><c>true</c> if there's at least one entity in the database that matches the specified predicate; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``3(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``3(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``4(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``4(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``5(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``5(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``6(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``6(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``7(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``7(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``8(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``8(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/> with the specified <paramref name="id"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``3(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``3(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``4(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``4(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``5(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``5(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``6(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``6(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``7(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
             <summary>
             Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            
             joined with the types specified as type parameters.
             </summary>
             <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
             <typeparam name="T2">The second type parameter.</typeparam>
             <typeparam name="T3">The third type parameter.</typeparam>
             <typeparam name="T4">The fourth type parameter.</typeparam>
             <typeparam name="T5">The fifth type parameter.</typeparam>
             <typeparam name="T6">The sixth type parameter.</typeparam>
             <typeparam name="TReturn">The return type parameter.</typeparam>
             <param name="connection">The connection to the database. This can either be open or closed.</param>
             <param name="transaction">Optional transaction for the command.</param>
             <param name="buffered">
             A value indicating whether the result of the query should be executed directly,
             or when the query is materialized (using <c>ToList()</c> for example).
             </param>
             <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``7(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``8(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``8(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves the automatically mapped entity of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.CreateMapDelegate``8(System.Collections.Generic.Dictionary{System.Int32,``0})">
            <summary>
            Creates a <see cref="T:System.Delegate"/> which performs the mapping between the joined tables specified
            in the generic parameters. The unique mapped entities of type <typeparamref name="T1"/> are
            stored in <paramref name="results"/>.
            </summary>
            <param name="results">A dictionary where the unique entities are added to.</param>
        </member>
        <member name="M:Dommel.DommelMapper.Count``1(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Returns the number of all entities.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The number of entities matching the specified predicate.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.CountAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Returns the number of all entities.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The number of entities matching the specified predicate.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Count``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Returns the number of entities matching the specified predicate.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The number of entities matching the specified predicate.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.CountAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Returns the number of entities matching the specified predicate.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The number of entities matching the specified predicate.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Delete``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction)">
            <summary>
            Deletes the specified entity from the database.
            Returns a value indicating whether the operation succeeded.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entity">The entity to be deleted.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A value indicating whether the delete operation succeeded.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.DeleteAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified entity from the database.
            Returns a value indicating whether the operation succeeded.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entity">The entity to be deleted.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>A value indicating whether the delete operation succeeded.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.DeleteMultiple``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Deletes all entities of type <typeparamref name="TEntity"/> matching the specified predicate from the database.
            Returns the number of rows affected.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter which entities are deleted.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.DeleteMultipleAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Deletes all entities of type <typeparamref name="TEntity"/> matching the specified predicate from the database.
            Returns the number of rows affected.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter which entities are deleted.</param>
            <param name="transaction">Optional transaction for the command.</param> 
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.DeleteAll``1(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Deletes all entities of type <typeparamref name="TEntity"/> from the database.
            Returns the number of rows affected.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.DeleteAllAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Deletes all entities of type <typeparamref name="TEntity"/> from the database.
            Returns the number of rows affected.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="F:Dommel.DommelMapper.LogReceived">
            <summary>
            A callback which gets invoked when queries and other information are logged.
            </summary>
        </member>
        <member name="M:Dommel.DommelMapper.UseDefaultTypeMap">
            <summary>
            Use the default <see cref="T:Dapper.SqlMapper.ITypeMap"/> provided by Dapper instead
            of the custom Dommel type map which supports <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute"/>.
            </summary>
        </member>
        <member name="M:Dommel.DommelMapper.SetPropertyResolver(Dommel.IPropertyResolver)">
            <summary>
            Sets the <see cref="T:Dommel.IPropertyResolver"/> implementation for resolving key of entities.
            </summary>
            <param name="resolver">An instance of <see cref="T:Dommel.IPropertyResolver"/>.</param>
        </member>
        <member name="M:Dommel.DommelMapper.SetKeyPropertyResolver(Dommel.IKeyPropertyResolver)">
            <summary>
            Sets the <see cref="T:Dommel.IKeyPropertyResolver"/> implementation for resolving key properties of entities.
            </summary>
            <param name="resolver">An instance of <see cref="T:Dommel.IKeyPropertyResolver"/>.</param>
        </member>
        <member name="M:Dommel.DommelMapper.SetForeignKeyPropertyResolver(Dommel.IForeignKeyPropertyResolver)">
            <summary>
            Sets the <see cref="T:Dommel.IForeignKeyPropertyResolver"/> implementation for resolving foreign key properties.
            </summary>
            <param name="resolver">An instance of <see cref="T:Dommel.IForeignKeyPropertyResolver"/>.</param>
        </member>
        <member name="M:Dommel.DommelMapper.SetTableNameResolver(Dommel.ITableNameResolver)">
            <summary>
            Sets the <see cref="T:Dommel.ITableNameResolver"/> implementation for resolving table names for entities.
            </summary>
            <param name="resolver">An instance of <see cref="T:Dommel.ITableNameResolver"/>.</param>
        </member>
        <member name="M:Dommel.DommelMapper.SetColumnNameResolver(Dommel.IColumnNameResolver)">
            <summary>
            Sets the <see cref="T:Dommel.IColumnNameResolver"/> implementation for resolving column names.
            </summary>
            <param name="resolver">An instance of <see cref="T:Dommel.IColumnNameResolver"/>.</param>
        </member>
        <member name="M:Dommel.DommelMapper.AddSqlBuilder(System.Type,Dommel.ISqlBuilder)">
            <summary>
            Adds a custom implementation of <see cref="T:Dommel.ISqlBuilder"/>
            for the specified ADO.NET connection type.
            </summary>
            <param name="connectionType">
            The ADO.NET conncetion type to use the <paramref name="builder"/> with.
            Example: <c>typeof(SqlConnection)</c>.
            </param>
            <param name="builder">An implementation of the <see cref="T:Dommel.ISqlBuilder"/> interface.</param>
        </member>
        <member name="M:Dommel.DommelMapper.AddSqlBuilder(System.String,Dommel.ISqlBuilder)">
            <summary>
            Adds a custom implementation of <see cref="T:Dommel.ISqlBuilder"/>
            for the specified connection name        ///
            </summary>
            <param name="connectionName">The name of the connection. E.g. "sqlconnection".</param>
            <param name="builder">An implementation of the <see cref="T:Dommel.ISqlBuilder"/> interface.</param>
        </member>
        <member name="M:Dommel.DommelMapper.GetSqlBuilder(System.Data.IDbConnection)">
            <summary>
            Gets the configured <see cref="T:Dommel.ISqlBuilder"/> for the specified <see cref="T:System.Data.IDbConnection"/> instance.
            </summary>
            <param name="connection">The database connection instance.</param>
            <returns>The <see cref="T:Dommel.ISqlBuilder"/> interface for the specified <see cref="T:System.Data.IDbConnection"/> instance.</returns>
        </member>
        <member name="F:Dommel.DommelMapper.SqlExpressionFactory">
            <summary>
            The factory to create <see cref="T:Dommel.SqlExpression`1"/> or custom instances.
            </summary>
        </member>
        <member name="M:Dommel.DommelMapper.From``1(System.Data.IDbConnection,System.Action{Dommel.SqlExpression{``0}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Executes an expression to query data from <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The entity to query data from.</typeparam>
            <param name="con">The connection to query data from.</param>
            <param name="sqlBuilder">A callback to build a <see cref="T:Dommel.SqlExpression`1"/>.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>The collection of entities returned from the query.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.FromAsync``1(System.Data.IDbConnection,System.Action{Dommel.SqlExpression{``0}},System.Data.IDbTransaction)">
            <summary>
            Executes an expression to query data from <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The entity to query data from.</typeparam>
            <param name="con">The connection to query data from.</param>
            <param name="sqlBuilder">A callback to build a <see cref="T:Dommel.SqlExpression`1"/>.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The collection of entities returned from the query.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
             <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``1(System.Data.IDbConnection,System.Object[])">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="ids">The id of the entity in the database.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="ids">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``1(System.Data.IDbConnection,System.Object[])">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="ids">The id of the entity in the database.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``1(System.Data.IDbConnection,System.Object[],System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="ids">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>A collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetPaged``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves a paged set of entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A paged collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetPagedAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves a paged set of entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>A paged collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Insert``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction)">
            <summary>
            Inserts the specified entity into the database and returns the ID.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entity">The entity to be inserted.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The ID of the inserted entity.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.InsertAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts the specified entity into the database and returns the ID.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entity">The entity to be inserted.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The ID of the inserted entity.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.InsertAll``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction)">
            <summary>
            Inserts the specified collection of entities into the database.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entities">The entities to be inserted.</param>
            <param name="transaction">Optional transaction for the command.</param>
        </member>
        <member name="M:Dommel.DommelMapper.InsertAllAsync``1(System.Data.IDbConnection,System.Collections.Generic.IEnumerable{``0},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Inserts the specified collection of entities into the database.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entities">The entities to be inserted.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
        </member>
        <member name="M:Dommel.DommelMapper.Get``3(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``3(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``4(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3},System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``4(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``5(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``5(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``6(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``6(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``7(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``7(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Get``8(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAsync``8(System.Data.IDbConnection,System.Object,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Retrieves the entity of type <typeparamref name="TReturn"/> with the specified id
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>The entity with the corresponding id joined with the specified types.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``3(System.Data.IDbConnection,System.Func{``0,``1,``2},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``4(System.Data.IDbConnection,System.Func{``0,``1,``2,``3},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``5(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``6(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``6(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``7(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``7(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAll``8(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.GetAllAsync``8(System.Data.IDbConnection,System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TReturn"/>
            joined with the types specified as type parameters.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The return type parameter.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/>
            joined with the specified type types.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Project``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.ProjectAsync``1(System.Data.IDbConnection,System.Object,System.Data.IDbTransaction)">
            <summary>
            Retrieves the entity of type <typeparamref name="TEntity"/> with the specified id.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="id">The id of the entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>The entity with the corresponding id.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.ProjectAll``1(System.Data.IDbConnection,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.ProjectAllAsync``1(System.Data.IDbConnection,System.Data.IDbTransaction)">
            <summary>
            Retrieves all the entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.ProjectPaged``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Retrieves a paged set of entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A paged collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.ProjectPagedAsync``1(System.Data.IDbConnection,System.Int32,System.Int32,System.Data.IDbTransaction)">
            <summary>
            Retrieves a paged set of entities of type <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A paged collection of entities of type <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TEntity"/> matching the specified
            <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TEntity"/> matching the specified
            <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate, or a default value if no entity matched.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            A instance of type <typeparamref name="TEntity"/> matching the specified
            <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects the first entity matching the specified predicate, or a default value if no entity matched.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A instance of type <typeparamref name="TEntity"/> matching the specified
            <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectPaged``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TEntity"/> matching the specified
            <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectPagedAsync``1(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Int32,System.Int32,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>
            A collection of entities of type <typeparamref name="TEntity"/> matching the specified
            <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Func{``0,``1,``2},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Func{``0,``1,``2},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Func{``0,``1,``2,``3},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Func{``0,``1,``2,``3},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Select``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction,System.Boolean)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefault``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Func{``0,``1,``2},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``3(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``2,System.Boolean}},System.Func{``0,``1,``2},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Func{``0,``1,``2,``3},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``4(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``3,System.Boolean}},System.Func{``0,``1,``2,``3},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``5(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``4,System.Boolean}},System.Func{``0,``1,``2,``3,``4},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``6(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``5,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``7(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``6,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.SelectAsync``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Selects all the entities matching the specified predicate.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="buffered">
            A value indicating whether the result of the query should be executed directly,
            or when the query is materialized (using <c>ToList()</c> for example).
            </param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/>.</param>
            <returns>
            A collection of entities of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.FirstOrDefaultAsync``8(System.Data.IDbConnection,System.Linq.Expressions.Expression{System.Func{``7,System.Boolean}},System.Func{``0,``1,``2,``3,``4,``5,``6,``7},System.Data.IDbTransaction)">
            <summary>
            Selects the first entity matching the specified predicate or a default value.
            </summary>
            <typeparam name="T1">The first type parameter. This is the source entity.</typeparam>
            <typeparam name="T2">The second type parameter.</typeparam>
            <typeparam name="T3">The third type parameter.</typeparam>
            <typeparam name="T4">The fourth type parameter.</typeparam>
            <typeparam name="T5">The fifth type parameter.</typeparam>
            <typeparam name="T6">The sixth type parameter.</typeparam>
            <typeparam name="T7">The seventh type parameter.</typeparam>
            <typeparam name="TReturn">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="predicate">A predicate to filter the results.</param>
            <param name="map">The mapping to perform on the entities in the result set.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>
            An entity of type <typeparamref name="TReturn"/> matching the specified <paramref name="predicate"/>.
            </returns>
        </member>
        <member name="M:Dommel.DommelMapper.Update``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction)">
            <summary>
            Updates the values of the specified entity in the database.
            The return value indicates whether the operation succeeded.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entity">The entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <returns>A value indicating whether the update operation succeeded.</returns>
        </member>
        <member name="M:Dommel.DommelMapper.UpdateAsync``1(System.Data.IDbConnection,``0,System.Data.IDbTransaction,System.Threading.CancellationToken)">
            <summary>
            Updates the values of the specified entity in the database.
            The return value indicates whether the operation succeeded.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="connection">The connection to the database. This can either be open or closed.</param>
            <param name="entity">The entity in the database.</param>
            <param name="transaction">Optional transaction for the command.</param>
            <param name="cancellationToken">Optional cancellation token for the command.</param>
            <returns>A value indicating whether the update operation succeeded.</returns>
        </member>
        <member name="T:Dommel.ColumnPropertyInfo">
            <summary>
            Represents the column of an entity.
            </summary>
        </member>
        <member name="M:Dommel.ColumnPropertyInfo.#ctor(System.Reflection.PropertyInfo,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:Dommel.ColumnPropertyInfo"/> instance from the
            specified <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </summary>
            <param name="property">
            The property which represents the database column. The <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption"/> is
            determined from the <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute"/> option specified on
            the property. Defaults to <see cref="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity"/> when <paramref name="isKey"/>
            is <c>true</c>; otherwise, <see cref="F:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None"/>.
            </param>
            <param name="isKey">Indicates whether a property is a key column.</param>
        </member>
        <member name="M:Dommel.ColumnPropertyInfo.#ctor(System.Reflection.PropertyInfo,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
            <summary>
            Initializes a new <see cref="T:Dommel.ColumnPropertyInfo"/> instance from the
            specified <see cref="T:System.Reflection.PropertyInfo"/> instance using the specified
            <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption"/>.
            </summary>
            <param name="property">The property which represents the database column.</param>
            <param name="generatedOption">
            The <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption"/> which specifies whether the value of
            the column this property represents is generated by the database.
            </param>
        </member>
        <member name="P:Dommel.ColumnPropertyInfo.Property">
            <summary>
            Gets a reference to the <see cref="T:System.Reflection.PropertyInfo"/> instance.
            </summary>
        </member>
        <member name="P:Dommel.ColumnPropertyInfo.GeneratedOption">
            <summary>
            Gets the <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption"/> which specifies whether the value of
            the column this property represents is generated by the database.
            </summary>
        </member>
        <member name="P:Dommel.ColumnPropertyInfo.IsGenerated">
            <summary>
            Gets a value indicating whether this key property's value is generated by the database.
            </summary>
        </member>
        <member name="T:Dommel.DefaultColumnNameResolver">
            <summary>
            Implements the <see cref="T:Dommel.IKeyPropertyResolver"/>.
            </summary>
        </member>
        <member name="M:Dommel.DefaultColumnNameResolver.ResolveColumnName(System.Reflection.PropertyInfo)">
            <summary>
            Resolves the column name for the property.
            Looks for the [Column] attribute. Otherwise it's just the name of the property.
            </summary>
        </member>
        <member name="T:Dommel.DefaultForeignKeyPropertyResolver">
            <summary>
            Implements the <see cref="T:Dommel.IForeignKeyPropertyResolver"/> interface.
            </summary>
        </member>
        <member name="M:Dommel.DefaultForeignKeyPropertyResolver.ResolveForeignKeyProperty(System.Type,System.Type,Dommel.ForeignKeyRelation@)">
            <summary>
            Resolves the foreign key property for the specified source type and including type
            by using <paramref name="includingType"/> + Id as property name.
            </summary>
            <param name="sourceType">The source type which should contain the foreign key property.</param>
            <param name="includingType">The type of the foreign key relation.</param>
            <param name="foreignKeyRelation">The foreign key relationship type.</param>
            <returns>The foreign key property for <paramref name="sourceType"/> and <paramref name="includingType"/>.</returns>
        </member>
        <member name="T:Dommel.DefaultKeyPropertyResolver">
            <summary>
            Implements the <see cref="T:Dommel.IKeyPropertyResolver"/> interface by resolving key properties
            with the [<see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute"/>] or with the name 'Id'.
            </summary>
        </member>
        <member name="M:Dommel.DefaultKeyPropertyResolver.ResolveKeyProperties(System.Type)">
            <summary>
            Finds the key properties by looking for properties with the
            [<see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute"/>] attribute or with the name 'Id'.
            </summary>
        </member>
        <member name="T:Dommel.DefaultPropertyResolver">
            <summary>
            Default implemenation of the <see cref="T:Dommel.IPropertyResolver"/> interface.
            </summary>
        </member>
        <member name="M:Dommel.DefaultPropertyResolver.ResolveProperties(System.Type)">
            <summary>
            Resolves the properties to be mapped for the specified type.
            </summary>
            <param name="type">The type to resolve the properties to be mapped for.</param>
            <returns>A collection of <see cref="T:System.Reflection.PropertyInfo"/>'s of the <paramref name="type"/>.</returns>
        </member>
        <member name="P:Dommel.DefaultPropertyResolver.PrimitiveTypes">
            <summary>
            Gets a collection of types that are considered 'primitive' for Dommel but are not for the CLR.
            Override this to specify your own set of types.
            </summary>
        </member>
        <member name="M:Dommel.DefaultPropertyResolver.FilterComplexTypes(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Filters the complex types from the specified collection of properties.
            </summary>
            <param name="properties">A collection of properties.</param>
            <returns>The properties that are considered 'primitive' of <paramref name="properties"/>.</returns>
        </member>
        <member name="T:Dommel.DefaultTableNameResolver">
            <summary>
            Default implementation of the <see cref="T:Dommel.ITableNameResolver"/> interface.
            </summary>
        </member>
        <member name="M:Dommel.DefaultTableNameResolver.ResolveTableName(System.Type)">
            <summary>
            Resolves the table name.
            Looks for the [Table] attribute. Otherwise by making the type
            plural (eg. Product -> Products) and removing the 'I' prefix for interfaces.
            </summary>
        </member>
        <member name="T:Dommel.ForeignKeyRelation">
            <summary>
            Describes a foreign key relationship.
            </summary>
        </member>
        <member name="F:Dommel.ForeignKeyRelation.OneToOne">
            <summary>
            Specifies a one-to-one relationship.
            </summary>
        </member>
        <member name="F:Dommel.ForeignKeyRelation.OneToMany">
            <summary>
            Specifies a one-to-many relationship.
            </summary>
        </member>
        <member name="T:Dommel.IColumnNameResolver">
            <summary>
            Defines methods for resolving column names for entities.
            Custom implementations can be registered with <see cref="M:Dommel.DommelMapper.SetColumnNameResolver(Dommel.IColumnNameResolver)"/>.
            </summary>
        </member>
        <member name="M:Dommel.IColumnNameResolver.ResolveColumnName(System.Reflection.PropertyInfo)">
            <summary>
            Resolves the column name for the specified property.
            </summary>
            <param name="propertyInfo">The property of the entity.</param>
            <returns>The column name for the property.</returns>
        </member>
        <member name="T:Dommel.IForeignKeyPropertyResolver">
            <summary>
            Defines methods for resolving foreign key properties.
            Custom implementations can be registered with <see cref="M:Dommel.DommelMapper.SetForeignKeyPropertyResolver(Dommel.IForeignKeyPropertyResolver)"/>.
            </summary>
        </member>
        <member name="M:Dommel.IForeignKeyPropertyResolver.ResolveForeignKeyProperty(System.Type,System.Type,Dommel.ForeignKeyRelation@)">
            <summary>
            Resolves the foreign key property for the specified source type and including type.
            </summary>
            <param name="sourceType">The source type which should contain the foreign key property.</param>
            <param name="includingType">The type of the foreign key relation.</param>
            <param name="foreignKeyRelation">The foreign key relationship type.</param>
            <returns>The foreign key property for <paramref name="sourceType"/> and <paramref name="includingType"/>.</returns>
        </member>
        <member name="T:Dommel.IgnoreAttribute">
            <summary>
            Specifies that a property should be ignored.
            </summary>
        </member>
        <member name="T:Dommel.IKeyPropertyResolver">
            <summary>
            Defines methods for resolving the key property of entities.
            Custom implementations can be registered with <see cref="M:Dommel.DommelMapper.SetKeyPropertyResolver(Dommel.IKeyPropertyResolver)"/>.
            </summary>
        </member>
        <member name="M:Dommel.IKeyPropertyResolver.ResolveKeyProperties(System.Type)">
            <summary>
            Resolves the key properties for the specified type.
            </summary>
            <param name="type">The type to resolve the key properties for.</param>
            <returns>A collection of <see cref="T:System.Reflection.PropertyInfo"/> instances of the key properties of <paramref name="type"/>.</returns>
        </member>
        <member name="T:Dommel.IPropertyResolver">
            <summary>
            Defines methods for resolving the properties of entities.
            Custom implementations can be registered with <see cref="M:Dommel.DommelMapper.SetPropertyResolver(Dommel.IPropertyResolver)"/>.
            </summary>
        </member>
        <member name="M:Dommel.IPropertyResolver.ResolveProperties(System.Type)">
            <summary>
            Resolves the properties to be mapped for the specified type.
            </summary>
            <param name="type">The type to resolve the properties to be mapped for.</param>
            <returns>A collection of <see cref="T:System.Reflection.PropertyInfo"/>'s of the <paramref name="type"/>.</returns>
        </member>
        <member name="T:Dommel.ISqlBuilder">
            <summary>
            Defines methods for building specialized SQL queries.
            </summary>
        </member>
        <member name="M:Dommel.ISqlBuilder.PrefixParameter(System.String)">
            <summary>
            Adds a prefix to the specified parameter.
            </summary>
            <param name="paramName">The name of the parameter to prefix.</param>
        </member>
        <member name="M:Dommel.ISqlBuilder.BuildInsert(System.Type,System.String,System.String[],System.String[])">
            <summary>
            Builds an insert query using the specified table name, column names and parameter names.
            A query to fetch the new ID will be included as well.
            </summary>
            <param name="type">The type of the entity to generate the insert query for.</param>
            <param name="tableName">The name of the table to query.</param>
            <param name="columnNames">The names of the columns in the table.</param>
            <param name="paramNames">The names of the parameters in the database command.</param>
            <returns>An insert query including a query to fetch the new ID.</returns>
        </member>
        <member name="M:Dommel.ISqlBuilder.BuildPaging(System.String,System.Int32,System.Int32)">
            <summary>
            Builds the paging part to be appended to an existing select query.
            </summary>
            <param name="orderBy">The order by part of the query.</param>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <returns>The paging part of a query.</returns>
        </member>
        <member name="M:Dommel.ISqlBuilder.QuoteIdentifier(System.String)">
            <summary>
            Adds quotes around (or at the start) of an identifier such as a table or column name.
            </summary>
            <param name="identifier">The identifier add quotes around. E.g. a table or column name.</param>
            <returns>The quoted <paramref name="identifier"/>.</returns>
        </member>
        <member name="M:Dommel.ISqlBuilder.LimitClause(System.Int32)">
            <summary>
            Returns a limit clause for the specified <paramref name="count"/>.
            </summary>
            <param name="count">The count of limit clause.</param>
            <returns>A limit clause of the specified count.</returns>
        </member>
        <member name="M:Dommel.ISqlBuilder.LikeExpression(System.String,System.String)">
            <summary>
            Returns a like-expresion for the specified <paramref name="columnName"/> and <paramref name="parameterName"/>.
            </summary>
            <param name="columnName">The column name of the like-expression.</param>
            <param name="parameterName">The parameter name of the like-expression.</param>
            <returns>A like-expression.</returns>
        </member>
        <member name="T:Dommel.ITableNameResolver">
            <summary>
            Defines methods for resolving table names of entities.
            Custom implementations can be registered with <see cref="M:Dommel.DommelMapper.SetTableNameResolver(Dommel.ITableNameResolver)"/>.
            </summary>
        </member>
        <member name="M:Dommel.ITableNameResolver.ResolveTableName(System.Type)">
            <summary>
            Resolves the table name for the specified type.
            </summary>
            <param name="type">The type to resolve the table name for.</param>
            <returns>A string containing the resolved table name for for <paramref name="type"/>.</returns>
        </member>
        <member name="T:Dommel.MySqlSqlBuilder">
            <summary>
            <see cref="T:Dommel.ISqlBuilder"/> implementation for MySQL.
            </summary>
        </member>
        <member name="M:Dommel.MySqlSqlBuilder.BuildInsert(System.Type,System.String,System.String[],System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.MySqlSqlBuilder.BuildPaging(System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.MySqlSqlBuilder.PrefixParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.MySqlSqlBuilder.QuoteIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.MySqlSqlBuilder.LimitClause(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.MySqlSqlBuilder.LikeExpression(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Dommel.PostgresSqlBuilder">
            <summary>
            <see cref="T:Dommel.ISqlBuilder"/> implementation for Postgres.
            </summary>
        </member>
        <member name="M:Dommel.PostgresSqlBuilder.BuildInsert(System.Type,System.String,System.String[],System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.PostgresSqlBuilder.BuildPaging(System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.PostgresSqlBuilder.PrefixParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.PostgresSqlBuilder.QuoteIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.PostgresSqlBuilder.LimitClause(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.PostgresSqlBuilder.LikeExpression(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Dommel.Resolvers">
            <summary>
            Helper class for retrieving type metadata to build SQL queries using the configured resolvers.
            </summary>
        </member>
        <member name="M:Dommel.Resolvers.KeyProperties(System.Type)">
            <summary>
            Gets the key properties for the specified type, using the configured <see cref="T:Dommel.IKeyPropertyResolver"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the key properties for.</param>
            <returns>The key properties for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dommel.Resolvers.ForeignKeyProperty(System.Type,System.Type,Dommel.ForeignKeyRelation@)">
            <summary>
            Gets the foreign key property for the specified source type and including type
            using the configured <see cref="T:Dommel.IForeignKeyPropertyResolver"/>.
            </summary>
            <param name="sourceType">The source type which should contain the foreign key property.</param>
            <param name="includingType">The type of the foreign key relation.</param>
            <param name="foreignKeyRelation">The foreign key relationship type.</param>
            <returns>The foreign key property for <paramref name="sourceType"/> and <paramref name="includingType"/>.</returns>
        </member>
        <member name="M:Dommel.Resolvers.Properties(System.Type)">
            <summary>
            Gets the properties to be mapped for the specified type, using the configured
            <see cref="T:Dommel.IPropertyResolver"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the properties from.</param>
            <returns>>The collection of to be mapped properties of <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dommel.Resolvers.Table(System.Type,System.Data.IDbConnection)">
            <summary>
            Gets the name of the table in the database for the specified type,
            using the configured <see cref="T:Dommel.ITableNameResolver"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the table name for.</param>
            <param name="connection">The database connection instance.</param>
            <returns>The table name in the database for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dommel.Resolvers.Table(System.Type,Dommel.ISqlBuilder)">
            <summary>
            Gets the name of the table in the database for the specified type,
            using the configured <see cref="T:Dommel.ITableNameResolver"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the table name for.</param>
            <param name="sqlBuilder">The SQL builder instance.</param>
            <returns>The table name in the database for <paramref name="type"/>.</returns>
        </member>
        <member name="M:Dommel.Resolvers.Column(System.Reflection.PropertyInfo,System.Data.IDbConnection)">
            <summary>
            Gets the name of the column in the database for the specified type,
            using the configured <see cref="T:Dommel.IColumnNameResolver"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> to get the column name for.</param>
            <param name="connection">The database connection instance.</param>
            <returns>The column name in the database for <paramref name="propertyInfo"/>.</returns>
        </member>
        <member name="M:Dommel.Resolvers.Column(System.Reflection.PropertyInfo,Dommel.ISqlBuilder,System.Boolean)">
            <summary>
            Gets the name of the column in the database for the specified type,
            using the configured <see cref="T:Dommel.IColumnNameResolver"/>.
            </summary>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> to get the column name for.</param>
            <param name="sqlBuilder">The SQL builder instance.</param>
            <param name="includeTableName">Whether to include table name with the column name for unambiguity. E.g. <c>[Products].[Name]</c>.</param>
            <returns>The column name in the database for <paramref name="propertyInfo"/>.</returns>
        </member>
        <member name="T:Dommel.SqlExpression`1">
            <summary>
            Represents a typed SQL expression.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
        </member>
        <member name="M:Dommel.SqlExpression`1.#ctor(Dommel.ISqlBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Dommel.SqlExpression`1"/>
            class using the specified <see cref="T:Dommel.ISqlBuilder"/>.
            </summary>
            <param name="sqlBuilder">The <see cref="T:Dommel.ISqlBuilder"/> instance.</param>
        </member>
        <member name="P:Dommel.SqlExpression`1.SqlBuilder">
            <summary>
            Gets the <see cref="T:Dommel.ISqlBuilder"/> instance used by this SQL expression.
            </summary>
        </member>
        <member name="P:Dommel.SqlExpression`1.ColumnNameResolver">
            <summary>
            Gets the <see cref="T:Dommel.IColumnNameResolver"/> instance used by this SQL expression.
            </summary>
        </member>
        <member name="M:Dommel.SqlExpression`1.Select">
            <summary>
            Selects all columns from <typeparamref name="TEntity"/>.
            </summary>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.Select(System.Func{`0,System.Object})">
            <summary>
            Selects the specified set of columns from <typeparamref name="TEntity"/>.
            </summary>
            <param name="selector">The columns to select.
            E.g. <code>x => new { x.Foo, x.Bar }</code>.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Builds a SQL expression for the specified filter expression.
            </summary>
            <param name="expression">The filter expression on the entity.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.AndWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds another where-statement with the 'and' operator.
            </summary>
            <param name="expression">The filter expression on the entity.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.OrWhere(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Adds another where-statement with the 'or' operator to the current expression.
            </summary>
            <param name="expression">The filter expression on the entity.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.Page(System.Int32,System.Int32)">
            <summary>
            Adds a paging-statement to the current expression.
            </summary>
            <param name="pageNumber">The number of the page to fetch, starting at 1.</param>
            <param name="pageSize">The page size.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.OrderBy(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an order-by-statement (ascending) to the current expression.
            </summary>
            <param name="selector">The column to order by. E.g. <code>x => x.Name</code>.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.OrderBy(System.Reflection.PropertyInfo)">
            <summary>
            Adds an order-by-statement (ascending) to the current expression.
            </summary>
            <param name="property">The property info of the column to order by.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.OrderByDescending(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
            Adds an order-by-statement (descending) to the current expression.
            </summary>
            <param name="selector">The column to order by. E.g. <code>x => x.Name</code>.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.OrderByDescending(System.Reflection.PropertyInfo)">
            <summary>
            Adds an order-by-statement (descending) to the current expression.
            </summary>
            <param name="property">The property info of the column to order by.</param>
            <returns>The current <see cref="T:Dommel.SqlExpression`1"/> instance.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitExpression(System.Linq.Expressions.Expression)">
            <summary>
            Visits the expression.
            </summary>
            <param name="expression">The expression to visit.</param>
            <returns>The result of the visit.</returns>
        </member>
        <member name="T:Dommel.SqlExpression`1.TextSearch">
            <summary>
            Specifies the type of text search to use.
            </summary>
        </member>
        <member name="F:Dommel.SqlExpression`1.TextSearch.Contains">
            <summary>
            Matches anywhere in a string.
            </summary>
        </member>
        <member name="F:Dommel.SqlExpression`1.TextSearch.StartsWith">
            <summary>
            Matches the start of a string.
            </summary>
        </member>
        <member name="F:Dommel.SqlExpression`1.TextSearch.EndsWith">
            <summary>
            Matches the end of a string.
            </summary>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitCallExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Process a method call expression.
            </summary>
            <param name="expression">The method call expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitInExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Processes a contains expression as IN clause
            </summary>
            <param name="expression">The method call expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitContainsExpression(System.Linq.Expressions.MethodCallExpression,Dommel.SqlExpression{`0}.TextSearch)">
            <summary>
            Processes a contains expression for string.
            </summary>
            <param name="expression">The method call expression.</param>
            <param name="textSearch">Type of search.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitToStringExpression(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Processes ToString expression to CAST columns into CHAR before comparison.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitLambda(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Processes a lambda expression.
            </summary>
            <param name="epxression">The lambda expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Processes a binary expression.
            </summary>
            <param name="expression">The binary expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Processes a unary expression.
            </summary>
            <param name="expression">The unary expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Processes a new expression.
            </summary>
            <param name="expression">The new expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Processes a member access expression.
            </summary>
            <param name="expression">The member access expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.VisitConstantExpression(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Processes a constant expression.
            </summary>
            <param name="expression">The constant expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.MemberToColumn(System.Linq.Expressions.MemberExpression)">
            <summary>
            Proccesses a member expression.
            </summary>
            <param name="expression">The member expression.</param>
            <returns>The result of the processing.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.GetOperant(System.Linq.Expressions.ExpressionType)">
            <summary>
            Returns the expression operant for the specified expression type.
            </summary>
            <param name="expressionType">The expression type for node of an expression tree.</param>
            <returns>The expression operand equivalent of the <paramref name="expressionType"/>.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.AddParameter(System.Object,System.String@)">
            <summary>
            Adds a parameter with the specified value to this SQL expression.
            </summary>
            <param name="value">The value of the parameter.</param>
            <param name="paramName">When this method returns, contains the generated parameter name.</param>
        </member>
        <member name="M:Dommel.SqlExpression`1.ToSql">
            <summary>
            Returns the current SQL query.
            </summary>
            <returns>The current SQL query.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.ToSql(Dapper.DynamicParameters@)">
            <summary>
            Returns the current SQL query.
            </summary>
            <param name="parameters">When this method returns, contains the parameters for the query.</param>
            <returns>The current SQL query.</returns>
        </member>
        <member name="M:Dommel.SqlExpression`1.ToString">
            <summary>
            Returns the current SQL query.
            </summary>
            <returns>The current SQL query.</returns>
        </member>
        <member name="T:Dommel.SqliteSqlBuilder">
            <summary>
            <see cref="T:Dommel.ISqlBuilder"/> implementation for SQLite.
            </summary>
        </member>
        <member name="M:Dommel.SqliteSqlBuilder.BuildInsert(System.Type,System.String,System.String[],System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqliteSqlBuilder.BuildPaging(System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqliteSqlBuilder.PrefixParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqliteSqlBuilder.QuoteIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqliteSqlBuilder.LimitClause(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqliteSqlBuilder.LikeExpression(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Dommel.SqlServerCeSqlBuilder">
            <summary>
            <see cref="T:Dommel.ISqlBuilder"/> implementation for SQL Server Compact Edition.
            </summary>
        </member>
        <member name="M:Dommel.SqlServerCeSqlBuilder.BuildInsert(System.Type,System.String,System.String[],System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerCeSqlBuilder.BuildPaging(System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerCeSqlBuilder.PrefixParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerCeSqlBuilder.QuoteIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerCeSqlBuilder.LimitClause(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerCeSqlBuilder.LikeExpression(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Dommel.SqlServerSqlBuilder">
            <summary>
            <see cref="T:Dommel.ISqlBuilder"/> implementation for SQL Server.
            </summary>
        </member>
        <member name="M:Dommel.SqlServerSqlBuilder.BuildInsert(System.Type,System.String,System.String[],System.String[])">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerSqlBuilder.BuildPaging(System.String,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerSqlBuilder.PrefixParameter(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerSqlBuilder.QuoteIdentifier(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerSqlBuilder.LimitClause(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Dommel.SqlServerSqlBuilder.LikeExpression(System.String,System.String)">
            <inheritdoc/>
        </member>
    </members>
</doc>
